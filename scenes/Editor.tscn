[gd_scene load_steps=37 format=2]

[ext_resource path="res://scripts/camera.gd" type="Script" id=1]
[ext_resource path="res://scripts/exporter.gd" type="Script" id=2]
[ext_resource path="res://scripts/Editor.gd" type="Script" id=3]
[ext_resource path="res://scripts/GUI.gd" type="Script" id=4]
[ext_resource path="res://assets/models/wireframe.obj" type="ArrayMesh" id=5]
[ext_resource path="res://resources/main_theme.tres" type="Theme" id=6]
[ext_resource path="res://assets/models/Material.material" type="Material" id=7]
[ext_resource path="res://assets/fonts/Comfortaa-VariableFont_wght.ttf" type="DynamicFontData" id=8]

[sub_resource type="QuadMesh" id=4]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=5]
code = "shader_type spatial;
render_mode unshaded, blend_mix, depth_draw_never, depth_test_disable;

/*
	AUTHOR: Hannah \"EMBYR\" Crawford
	ENGINE_VERSION: 4.0.3
	
	HOW TO USE:
		1. Create a MeshInstance3D node and place it in your scene.
		2. Set it's size to 2x2.
		3. Enable the \"Flip Faces\" option.
		4. Create a new shader material with this shader.
		5. Assign the material to the MeshInstance3D
	
	LIMITATIONS:
		Does not work well with TAA enabled.
	
	MOBILE_NOTES:
		The mobile renderer does not have access to the normal_roughness texture
		so we must rely on techniques to reconstruct this information from the
		depth buffer.
		
		If you require support on mobile please uncomment the SUPPORT_MOBILE line
		below. I have done my best to match the appearance between the two modes
		however, mobile does not take into account smooth-shaded faces.
		
		The high-quality reconstruction method used on mobile is rather heavy on
		texture samples. If you would like to use the lower-quality recontruction
		method for better performance, please uncomment the NAIVE_NORMAL_RECONSTRUCTION
		line below.
*/
//#define SUPPORT_MOBILE
//#define NAIVE_NORMAL_RECONSTRUCTION

uniform vec4 outlineColor: hint_color = vec4(0.0, 0.0, 0.0, 0.78);
uniform float depth_threshold = 0.025;
uniform float normal_threshold : hint_range(0.0, 1.5) = 0.5;
uniform float normal_smoothing : hint_range(0.0, 1.0) = 0.25;

uniform float max_thickness: hint_range(0.0, 5.0) = 1.3;
uniform float min_thickness = 0.5;
uniform float max_distance = 75.0;
uniform float min_distance = 2.0;

uniform float grazing_fresnel_power = 5.0;
uniform float grazing_angle_mask_power = 1.0;
uniform float grazing_angle_modulation_factor = 50.0;






varying flat mat4 model_view_matrix;


struct UVNeighbors {
	vec2 center; 
	vec2 left;     vec2 right;     vec2 up;          vec2 down;
	vec2 top_left; vec2 top_right; vec2 bottom_left; vec2 bottom_right;
};

struct NeighborDepthSamples {
	float c_d; 
	float l_d;  float r_d;  float u_d;  float d_d; 
	float tl_d; float tr_d; float bl_d; float br_d;
};

UVNeighbors getNeighbors(vec2 center, float width, float aspect) {
	vec2 h_offset = vec2(width * aspect * 0.001, 0.0);
	vec2 v_offset = vec2(0.0, width * 0.001);
	UVNeighbors n;
	n.center = center;
	n.left   = center - h_offset;
	n.right  = center + h_offset;
	n.up     = center - v_offset;
	n.down   = center + v_offset;
	n.top_left     = center - (h_offset - v_offset);
	n.top_right    = center + (h_offset - v_offset);
	n.bottom_left  = center - (h_offset + v_offset);
	n.bottom_right = center + (h_offset + v_offset);
	return n;
}

float getMinimumDepth(NeighborDepthSamples ds){
	return min(ds.c_d, min(ds.l_d, min(ds.r_d, min(ds.u_d, min(ds.d_d, min(ds.tl_d, min(ds.tr_d, min(ds.bl_d, ds.br_d))))))));
}

float getLinearDepth(float depth, vec2 uv, mat4 inv_proj) {
	vec3 ndc = vec3(uv * 2.0 - 1.0, depth);
	vec4 view = inv_proj * vec4(ndc, 1.0);
	view.xyz /= view.w;
	return -view.z;
}

NeighborDepthSamples getLinearDepthSamples(UVNeighbors uvs, sampler2D depth_tex, mat4 invProjMat) {
	NeighborDepthSamples result;
	result.c_d  = getLinearDepth(texture(depth_tex, uvs.center).r, uvs.center, invProjMat);
	result.l_d  = getLinearDepth(texture(depth_tex, uvs.left).r  , uvs.left  , invProjMat);
	result.r_d  = getLinearDepth(texture(depth_tex, uvs.right).r , uvs.right , invProjMat);
	result.u_d  = getLinearDepth(texture(depth_tex, uvs.up).r    , uvs.up    , invProjMat);
	result.d_d  = getLinearDepth(texture(depth_tex, uvs.down).r  , uvs.down  , invProjMat);
	result.tl_d = getLinearDepth(texture(depth_tex, uvs.top_left).r, uvs.top_left, invProjMat);
	result.tr_d = getLinearDepth(texture(depth_tex, uvs.top_right).r, uvs.top_right, invProjMat);
	result.bl_d = getLinearDepth(texture(depth_tex, uvs.bottom_left).r, uvs.bottom_left, invProjMat);
	result.br_d = getLinearDepth(texture(depth_tex, uvs.bottom_right).r, uvs.bottom_right, invProjMat);
	return result;
}

float remap(float v, float from1, float to1, float from2, float to2) {
	return (v - from1) / (to1 - from1) * (to2 - from2) + from2;
}

float fresnel(float amount, vec3 normal, vec3 view) {
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

float getGrazingAngleModulation(vec3 pixel_normal, vec3 view) {
	float x = clamp(((fresnel(grazing_fresnel_power, pixel_normal, view) - 1.0) / grazing_angle_mask_power) + 1.0, 0.0, 1.0);
	return (x + grazing_angle_modulation_factor) + 1.0;
}

float detectEdgesDepth(NeighborDepthSamples depth_samples, vec3 pixel_normal, vec3 view) {
	float n_total = 
		depth_samples.l_d + 
		depth_samples.r_d + 
		depth_samples.u_d + 
		depth_samples.d_d + 
		depth_samples.tl_d + 
		depth_samples.tr_d + 
		depth_samples.bl_d + 
		depth_samples.br_d;
	
	float t = depth_threshold * getGrazingAngleModulation(pixel_normal, view);
	return step(t, n_total - (depth_samples.c_d * 8.0));
}

vec3 reconstructWorldPosition(float depth, mat4 model_view, mat4 inv_proj, vec2 screen_uv, mat4 world, mat4 inv_cam){
  vec4 pos = inverse(model_view) * inv_proj * vec4((screen_uv * 2.0 - 1.0), depth * 2.0 - 1.0, 1.0);
  pos.xyz /= (pos.w + 0.0001 * (1.-abs(sign(pos.w))));
  return (pos * inv_cam).xyz + world[3].xyz;
}

vec3 reconstructWorldNormal(sampler2D depth_tex, mat4 model_view, mat4 inv_proj, vec2 screen_uv, mat4 world, mat4 inv_cam, vec2 viewport_size) {
    vec2 e = vec2(1.0 / viewport_size);
    float c0 = texture(depth_tex, screen_uv                ).r;
    float l2 = texture(depth_tex, screen_uv - vec2(2,0) * e).r;
    float l1 = texture(depth_tex, screen_uv - vec2(1,0) * e).r;
    float r1 = texture(depth_tex, screen_uv + vec2(1,0) * e).r;
    float r2 = texture(depth_tex, screen_uv + vec2(2,0) * e).r;
    float b2 = texture(depth_tex, screen_uv - vec2(0,2) * e).r;
    float b1 = texture(depth_tex, screen_uv - vec2(0,1) * e).r;
    float t1 = texture(depth_tex, screen_uv + vec2(0,1) * e).r;
    float t2 = texture(depth_tex, screen_uv + vec2(0,2) * e).r;
    
    float dl = abs(l1 * l2 / (2.0 * l2 - l1) - c0);
    float dr = abs(r1 * r2 / (2.0 * r2 - r1) - c0);
    float db = abs(b1 * b2 / (2.0 * b2 - b1) - c0);
    float dt = abs(t1 * t2 / (2.0 * t2 - t1) - c0);
    
    vec3 ce = reconstructWorldPosition(c0, model_view, inv_proj, screen_uv, world, inv_cam);

    vec3 dpdx = (dl<dr) ?  ce-reconstructWorldPosition(l1, model_view, inv_proj, screen_uv - vec2(1,0) * e, world, inv_cam) : 
                          -ce+reconstructWorldPosition(r1, model_view, inv_proj, screen_uv + vec2(1,0) * e, world, inv_cam) ;
    vec3 dpdy = (db<dt) ?  ce-reconstructWorldPosition(b1, model_view, inv_proj, screen_uv - vec2(0,1) * e, world, inv_cam) : 
                          -ce+reconstructWorldPosition(t1, model_view, inv_proj, screen_uv + vec2(0,1) * e, world, inv_cam) ;

    return normalize(cross(dpdx,dpdy));
}


float detectEdgesNormalReconstructed(UVNeighbors uvs, sampler2D depth_tex, mat4 model_view, mat4 inv_proj, vec2 screen_uv, mat4 world, mat4 inv_cam, vec2 viewport_size){
	vec3 n_u  = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.up,           world, inv_cam, viewport_size);
	vec3 n_d  = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.down,         world, inv_cam, viewport_size);
	vec3 n_l  = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.left,         world, inv_cam, viewport_size);
	vec3 n_r  = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.right,        world, inv_cam, viewport_size);
	vec3 n_tl = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.top_left,     world, inv_cam, viewport_size);
	vec3 n_tr = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.top_right,    world, inv_cam, viewport_size);
	vec3 n_bl = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.bottom_left,  world, inv_cam, viewport_size);
	vec3 n_br = reconstructWorldNormal(depth_tex, model_view, inv_proj, uvs.bottom_right, world, inv_cam, viewport_size);
	
	vec3 normalFiniteDifference0 = n_tr - n_bl;
	vec3 normalFiniteDifference1 = n_tl - n_br;
	vec3 normalFiniteDifference2 = n_l - n_r;
	vec3 normalFiniteDifference3 = n_u - n_d;
	
	float edgeNormal = sqrt(
		dot(normalFiniteDifference0, normalFiniteDifference0) + 
		dot(normalFiniteDifference1, normalFiniteDifference1) + 
		dot(normalFiniteDifference2, normalFiniteDifference2) + 
		dot(normalFiniteDifference3, normalFiniteDifference3)
	) * 0.5;
	
	return smoothstep(normal_threshold - normal_smoothing, normal_threshold + normal_smoothing, edgeNormal);
}

float detectEdgesNormal(UVNeighbors uvs, sampler2D normTex, vec3 camDirWorld){
	vec3 n_u = texture(normTex, uvs.up).xyz;
	vec3 n_d = texture(normTex, uvs.down).xyz;
	vec3 n_l = texture(normTex, uvs.left).xyz;
	vec3 n_r = texture(normTex, uvs.right).xyz;
	vec3 n_tl = texture(normTex, uvs.top_left).xyz;
	vec3 n_tr = texture(normTex, uvs.top_right).xyz;
	vec3 n_bl = texture(normTex, uvs.bottom_left).xyz;
	vec3 n_br = texture(normTex, uvs.bottom_right).xyz;
	
	vec3 normalFiniteDifference0 = n_tr - n_bl;
	vec3 normalFiniteDifference1 = n_tl - n_br;
	vec3 normalFiniteDifference2 = n_l - n_r;
	vec3 normalFiniteDifference3 = n_u - n_d;
	
	float edgeNormal = sqrt(
		dot(normalFiniteDifference0, normalFiniteDifference0) + 
		dot(normalFiniteDifference1, normalFiniteDifference1) + 
		dot(normalFiniteDifference2, normalFiniteDifference2) + 
		dot(normalFiniteDifference3, normalFiniteDifference3)
	);
	
	return smoothstep(normal_threshold - normal_smoothing, normal_threshold + normal_smoothing, edgeNormal);
}


void vertex() {
	POSITION = vec4(VERTEX, 1.0);
	

    model_view_matrix = INV_PROJECTION_MATRIX * mat4(PROJECTION_MATRIX[0],PROJECTION_MATRIX[1],PROJECTION_MATRIX[2],PROJECTION_MATRIX[3]);

}

void fragment() {
	float aspect = float(VIEWPORT_SIZE.y) / float(VIEWPORT_SIZE.x);
	
	UVNeighbors n = getNeighbors(SCREEN_UV, max_thickness, aspect);
	NeighborDepthSamples depth_samples = getLinearDepthSamples(n, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	
	float min_d = getMinimumDepth(depth_samples);
	float thickness = clamp(remap(min_d, min_distance, max_distance, max_thickness, min_thickness), min_thickness, max_thickness);
	float fade_a = clamp(remap(min_d, min_distance, max_distance, 1.0, 0.0), 0.0, 1.0);
	
	n = getNeighbors(SCREEN_UV, thickness, aspect);
	depth_samples = getLinearDepthSamples(n, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	

	vec3 pixel_normal = reconstructWorldNormal(DEPTH_TEXTURE, INV_PROJECTION_MATRIX, INV_PROJECTION_MATRIX, SCREEN_UV, INV_PROJECTION_MATRIX, INV_PROJECTION_MATRIX, VIEWPORT_SIZE.xy);

	
	float depthEdges = detectEdgesDepth(depth_samples, pixel_normal, VIEW);
	


	float normEdges = min(detectEdgesNormalReconstructed(n, DEPTH_TEXTURE, model_view_matrix, INV_PROJECTION_MATRIX, SCREEN_UV, INV_PROJECTION_MATRIX, INV_PROJECTION_MATRIX, VIEWPORT_SIZE.xy), 1.0);

	
	ALBEDO.rgb = outlineColor.rgb;
	ALPHA = max(depthEdges, normEdges) * outlineColor.a * fade_a;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/outlineColor = Color( 0, 0, 0, 0.780392 )
shader_param/depth_threshold = 0.025
shader_param/normal_threshold = 0.5
shader_param/normal_smoothing = 0.25
shader_param/max_thickness = 1.3
shader_param/min_thickness = 0.5
shader_param/max_distance = 15.0
shader_param/min_distance = 2.0
shader_param/grazing_fresnel_power = 5.0
shader_param/grazing_angle_mask_power = 1.0
shader_param/grazing_angle_modulation_factor = 50.0

[sub_resource type="StyleBoxFlat" id=15]
bg_color = Color( 0, 0, 0, 0 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="Theme" id=14]

[sub_resource type="DynamicFont" id=33]
size = 12
font_data = ExtResource( 8 )

[sub_resource type="StyleBoxFlat" id=18]
bg_color = Color( 0.803922, 0.294118, 0.294118, 1 )
corner_radius_top_left = 50
corner_radius_top_right = 50
corner_radius_bottom_right = 50
corner_radius_bottom_left = 50

[sub_resource type="DynamicFont" id=32]
size = 12
font_data = ExtResource( 8 )

[sub_resource type="ProceduralSky" id=1]
sky_top_color = Color( 0.152941, 0.176471, 0.2, 1 )
sky_horizon_color = Color( 0.152941, 0.176471, 0.2, 1 )
ground_bottom_color = Color( 0.152941, 0.176471, 0.2, 1 )
ground_horizon_color = Color( 0.152941, 0.176471, 0.2, 1 )
sun_color = Color( 0.156863, 0.184314, 0.211765, 1 )
sun_latitude = -31.8

[sub_resource type="Environment" id=2]
background_mode = 2
background_sky = SubResource( 1 )
background_color = Color( 1, 1, 1, 1 )
tonemap_mode = 2
auto_exposure_scale = 0.25
auto_exposure_max_luma = 0.7
auto_exposure_speed = 30.0
ssao_enabled = true
ssao_quality = 2
dof_blur_far_distance = 30.0
dof_blur_far_transition = 317.06
dof_blur_far_quality = 2
dof_blur_near_quality = 2

[sub_resource type="ArrayMesh" id=19]
resource_name = "nav_block_Cube001"
surfaces/0 = {
"aabb": AABB( -1, -1, -1, 2.00001, 2.00001, 2 ),
"array_data": PoolByteArray( 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 127, 127, 0, 126, 0, 57, 0, 56, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 129, 63, 0, 57, 0, 56, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 127, 0, 0, 127, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 191, 129, 0, 127, 63, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 191, 130, 0, 127, 193, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 191, 0, 130, 127, 63, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 191, 0, 129, 127, 63, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 56, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 191, 129, 0, 127, 63, 0, 54, 0, 56, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 191, 130, 0, 127, 193, 0, 54, 0, 56, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 191, 0, 126, 127, 63, 0, 54, 0, 56, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 54, 0, 56, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 54, 0, 56, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 191, 0, 127, 127, 63, 0, 54, 0, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 127, 63, 0, 54, 0, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 127, 127, 0, 126, 0, 54, 0, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 127, 0, 0, 127, 0, 54, 0, 56, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 126, 0, 57, 0, 52, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 129, 63, 0, 57, 0, 52, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 127, 0, 0, 126, 0, 57, 0, 52, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 63, 129, 0, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 63, 129, 0, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 63, 0, 130, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 63, 0, 129, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 63, 126, 129, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 46, 186, 104, 63, 46, 186, 104, 63, 127, 127, 127, 63, 0, 57, 0, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 126, 63, 0, 54, 0, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 0, 126, 0, 54, 0, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 127, 0, 0, 127, 0, 54, 0, 52, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 63, 129, 0, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 63, 129, 0, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 63, 0, 126, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 63, 127, 127, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 63, 126, 127, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 46, 186, 104, 191, 46, 186, 104, 63, 0, 127, 127, 63, 0, 54, 0, 52, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 129, 0, 0, 127, 0, 57, 0, 58, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 127, 127, 0, 126, 0, 57, 0, 58, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 129, 63, 0, 59, 0, 56, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 191, 0, 129, 127, 63, 0, 57, 0, 58, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 58, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 58, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 191, 0, 130, 127, 63, 0, 57, 0, 58, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 191, 127, 0, 127, 63, 0, 57, 0, 58, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 191, 126, 0, 127, 193, 0, 57, 0, 58, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 54, 0, 58, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 48, 0, 56, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 191, 0, 127, 127, 63, 0, 48, 0, 56, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 191, 0, 126, 127, 63, 0, 48, 0, 56, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 191, 127, 0, 127, 63, 0, 48, 0, 56, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 191, 126, 0, 127, 193, 0, 54, 0, 58, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 129, 0, 0, 126, 0, 54, 0, 58, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 127, 63, 0, 48, 0, 56, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 127, 127, 0, 126, 0, 54, 0, 58, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 129, 0, 0, 126, 0, 57, 0, 60, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 126, 0, 57, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 130, 63, 0, 59, 0, 52, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 63, 0, 129, 127, 63, 0, 57, 0, 0, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 63, 126, 129, 127, 63, 0, 57, 0, 0, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 63, 127, 127, 127, 63, 0, 57, 0, 0, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 63, 0, 130, 127, 63, 0, 57, 0, 60, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 63, 127, 0, 127, 63, 0, 57, 0, 0, 46, 186, 104, 191, 46, 186, 104, 63, 46, 186, 104, 63, 127, 0, 127, 63, 0, 57, 0, 60, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 129, 0, 0, 127, 0, 54, 0, 60, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 127, 63, 0, 48, 0, 52, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 0, 126, 0, 54, 0, 0, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 63, 127, 127, 127, 63, 0, 54, 0, 0, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 63, 126, 127, 127, 63, 0, 48, 0, 52, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 63, 0, 127, 127, 63, 0, 48, 0, 52, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 63, 0, 126, 127, 63, 0, 48, 0, 52, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 63, 127, 0, 127, 63, 0, 54, 0, 0, 46, 186, 104, 191, 46, 186, 104, 191, 46, 186, 104, 63, 127, 0, 127, 63, 0, 48, 0, 52, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 191, 129, 0, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 191, 0, 130, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 191, 0, 129, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 56, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 63, 129, 0, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 63, 0, 130, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 63, 0, 129, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 46, 186, 104, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 52, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 191, 0, 129, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 58, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 191, 0, 130, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 191, 127, 0, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 63, 0, 129, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 63, 0, 130, 127, 63, 0, 57, 0, 60, 92, 116, 81, 191, 46, 186, 104, 63, 92, 116, 81, 63, 127, 0, 127, 63, 0, 57, 0, 60, 92, 116, 81, 63, 0, 0, 128, 63, 92, 116, 81, 191, 129, 0, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 0, 0, 128, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 56, 92, 116, 81, 63, 0, 0, 128, 63, 92, 116, 81, 191, 0, 127, 129, 63, 46, 57, 162, 55, 92, 116, 81, 63, 0, 0, 128, 63, 92, 116, 81, 63, 129, 0, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 0, 0, 128, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 0, 0, 128, 63, 92, 116, 81, 63, 0, 127, 129, 63, 46, 57, 93, 52, 92, 116, 81, 191, 0, 0, 128, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 58, 92, 116, 81, 191, 0, 0, 128, 63, 92, 116, 81, 191, 0, 127, 129, 63, 209, 58, 162, 55, 92, 116, 81, 191, 0, 0, 128, 63, 92, 116, 81, 191, 127, 0, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 0, 0, 128, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 0, 0, 128, 63, 92, 116, 81, 63, 0, 127, 130, 63, 209, 58, 93, 52, 92, 116, 81, 191, 0, 0, 128, 63, 92, 116, 81, 63, 127, 0, 127, 63, 0, 57, 0, 60, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 191, 129, 0, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 191, 0, 129, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 56, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 56, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 191, 129, 0, 127, 63, 0, 54, 0, 56, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 54, 0, 56, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 54, 0, 56, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 191, 0, 127, 127, 63, 0, 54, 0, 56, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 191, 0, 129, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 58, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 191, 0, 0, 127, 193, 0, 57, 0, 58, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 191, 127, 0, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 54, 0, 58, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 191, 0, 0, 127, 193, 0, 48, 0, 56, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 191, 0, 127, 127, 63, 0, 48, 0, 56, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 191, 127, 0, 127, 63, 0, 54, 0, 58, 92, 116, 81, 63, 92, 116, 81, 63, 0, 0, 128, 191, 129, 0, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 92, 116, 81, 63, 0, 0, 128, 191, 0, 129, 127, 63, 0, 57, 0, 56, 92, 116, 81, 63, 92, 116, 81, 63, 0, 0, 128, 191, 127, 127, 0, 126, 209, 56, 46, 56, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 128, 191, 129, 0, 127, 63, 0, 54, 0, 56, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 128, 191, 127, 127, 0, 126, 93, 54, 46, 56, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 128, 191, 0, 127, 127, 63, 0, 54, 0, 56, 92, 116, 81, 191, 92, 116, 81, 63, 0, 0, 128, 191, 0, 129, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 92, 116, 81, 63, 0, 0, 128, 191, 127, 127, 0, 126, 209, 56, 209, 57, 92, 116, 81, 191, 92, 116, 81, 63, 0, 0, 128, 191, 127, 0, 127, 63, 0, 57, 0, 58, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 128, 191, 127, 127, 0, 126, 93, 54, 209, 57, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 128, 191, 0, 127, 127, 63, 0, 48, 0, 56, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 128, 191, 127, 0, 127, 63, 0, 54, 0, 58, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 191, 0, 129, 127, 63, 0, 57, 0, 58, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 58, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 191, 127, 0, 127, 63, 0, 57, 0, 58, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 191, 126, 0, 127, 193, 0, 57, 0, 58, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 54, 0, 58, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 191, 0, 127, 127, 63, 0, 48, 0, 56, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 191, 127, 0, 127, 63, 0, 48, 0, 56, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 191, 126, 0, 127, 193, 0, 54, 0, 58, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 63, 0, 129, 127, 63, 0, 57, 0, 60, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 0, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 63, 127, 0, 127, 63, 0, 57, 0, 0, 46, 186, 104, 191, 92, 116, 81, 63, 92, 116, 81, 63, 127, 0, 127, 63, 0, 57, 0, 60, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 54, 0, 0, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 63, 0, 127, 127, 63, 0, 48, 0, 52, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 63, 127, 0, 127, 63, 0, 54, 0, 0, 46, 186, 104, 191, 92, 116, 81, 191, 92, 116, 81, 63, 127, 0, 127, 63, 0, 48, 0, 52, 0, 0, 128, 191, 92, 116, 81, 63, 92, 116, 81, 191, 129, 0, 0, 127, 209, 56, 46, 58, 0, 0, 128, 191, 92, 116, 81, 63, 92, 116, 81, 191, 0, 129, 127, 63, 0, 57, 0, 58, 0, 0, 128, 191, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 58, 0, 0, 128, 191, 92, 116, 81, 191, 92, 116, 81, 191, 129, 0, 0, 126, 93, 54, 46, 58, 0, 0, 128, 191, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 54, 0, 58, 0, 0, 128, 191, 92, 116, 81, 191, 92, 116, 81, 191, 0, 127, 127, 63, 0, 48, 0, 56, 0, 0, 128, 191, 92, 116, 81, 63, 92, 116, 81, 63, 129, 0, 0, 126, 209, 56, 209, 59, 0, 0, 128, 191, 92, 116, 81, 63, 92, 116, 81, 63, 0, 129, 127, 63, 0, 57, 0, 60, 0, 0, 128, 191, 92, 116, 81, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 0, 0, 0, 128, 191, 92, 116, 81, 191, 92, 116, 81, 63, 129, 0, 0, 127, 93, 54, 209, 59, 0, 0, 128, 191, 92, 116, 81, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 54, 0, 0, 0, 0, 128, 191, 92, 116, 81, 191, 92, 116, 81, 63, 0, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 63, 129, 0, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 63, 0, 129, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 63, 126, 129, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 92, 116, 81, 63, 46, 186, 104, 63, 127, 127, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 63, 129, 0, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 63, 127, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 63, 126, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 92, 116, 81, 191, 46, 186, 104, 63, 0, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 63, 0, 129, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 63, 126, 129, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 63, 127, 127, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 92, 116, 81, 63, 46, 186, 104, 63, 127, 0, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 63, 127, 127, 127, 63, 0, 54, 0, 0, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 63, 126, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 63, 0, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 92, 116, 81, 191, 46, 186, 104, 63, 127, 0, 127, 63, 0, 54, 0, 0, 92, 116, 81, 63, 92, 116, 81, 63, 0, 0, 128, 63, 129, 0, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 92, 116, 81, 63, 0, 0, 128, 63, 0, 129, 127, 63, 0, 57, 0, 52, 92, 116, 81, 63, 92, 116, 81, 63, 0, 0, 128, 63, 0, 0, 0, 126, 209, 56, 69, 51, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 128, 63, 129, 0, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 128, 63, 0, 0, 0, 126, 93, 54, 69, 51, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 128, 63, 0, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 191, 92, 116, 81, 63, 0, 0, 128, 63, 0, 129, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 92, 116, 81, 63, 0, 0, 128, 63, 0, 0, 0, 126, 209, 56, 209, 37, 92, 116, 81, 191, 92, 116, 81, 63, 0, 0, 128, 63, 127, 0, 127, 63, 0, 57, 0, 0, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 128, 63, 0, 0, 0, 126, 93, 54, 209, 37, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 128, 63, 0, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 128, 63, 127, 0, 127, 63, 0, 54, 0, 0, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 191, 129, 0, 127, 63, 0, 57, 0, 56, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 191, 130, 0, 127, 193, 0, 57, 0, 56, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 191, 0, 129, 127, 63, 0, 57, 0, 56, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 56, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 191, 129, 0, 127, 63, 0, 54, 0, 56, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 191, 130, 0, 127, 193, 0, 54, 0, 56, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 54, 0, 56, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 191, 0, 127, 127, 63, 0, 54, 0, 56, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 63, 129, 0, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 63, 129, 0, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 63, 0, 129, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 92, 116, 81, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 52, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 63, 129, 0, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 63, 129, 0, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 54, 0, 52, 46, 186, 104, 63, 92, 116, 81, 191, 92, 116, 81, 63, 0, 127, 127, 63, 0, 54, 0, 52, 0, 0, 128, 63, 92, 116, 81, 63, 92, 116, 81, 191, 0, 129, 127, 63, 0, 57, 0, 56, 0, 0, 128, 63, 92, 116, 81, 63, 92, 116, 81, 191, 0, 0, 127, 193, 0, 57, 0, 56, 0, 0, 128, 63, 92, 116, 81, 63, 92, 116, 81, 191, 127, 0, 0, 127, 209, 56, 162, 55, 0, 0, 128, 63, 92, 116, 81, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 54, 0, 56, 0, 0, 128, 63, 92, 116, 81, 191, 92, 116, 81, 191, 0, 127, 127, 63, 0, 54, 0, 56, 0, 0, 128, 63, 92, 116, 81, 191, 92, 116, 81, 191, 127, 0, 0, 127, 93, 54, 162, 55, 0, 0, 128, 63, 92, 116, 81, 63, 92, 116, 81, 63, 0, 129, 127, 63, 0, 57, 0, 52, 0, 0, 128, 63, 92, 116, 81, 63, 92, 116, 81, 63, 127, 127, 127, 63, 0, 57, 0, 52, 0, 0, 128, 63, 92, 116, 81, 63, 92, 116, 81, 63, 127, 0, 0, 126, 209, 56, 93, 52, 0, 0, 128, 63, 92, 116, 81, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 54, 0, 52, 0, 0, 128, 63, 92, 116, 81, 191, 92, 116, 81, 63, 0, 127, 127, 63, 0, 54, 0, 52, 0, 0, 128, 63, 92, 116, 81, 191, 92, 116, 81, 63, 127, 0, 0, 127, 93, 54, 93, 52, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 191, 129, 0, 127, 63, 0, 54, 0, 56, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 191, 0, 126, 127, 63, 0, 54, 0, 56, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 54, 0, 56, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 191, 0, 127, 127, 63, 0, 54, 0, 56, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 63, 129, 0, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 63, 0, 126, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 46, 186, 104, 191, 92, 116, 81, 63, 0, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 48, 0, 56, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 191, 0, 127, 127, 63, 0, 48, 0, 56, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 191, 0, 126, 127, 63, 0, 48, 0, 56, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 191, 127, 0, 127, 63, 0, 48, 0, 56, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 63, 0, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 63, 0, 126, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 46, 186, 104, 191, 92, 116, 81, 63, 127, 0, 127, 63, 0, 48, 0, 52, 92, 116, 81, 63, 0, 0, 128, 191, 92, 116, 81, 191, 129, 0, 127, 63, 0, 54, 0, 56, 92, 116, 81, 63, 0, 0, 128, 191, 92, 116, 81, 191, 0, 129, 127, 63, 162, 53, 162, 55, 92, 116, 81, 63, 0, 0, 128, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 54, 0, 56, 92, 116, 81, 63, 0, 0, 128, 191, 92, 116, 81, 63, 129, 0, 127, 63, 0, 54, 0, 52, 92, 116, 81, 63, 0, 0, 128, 191, 92, 116, 81, 63, 0, 129, 126, 63, 162, 53, 93, 52, 92, 116, 81, 63, 0, 0, 128, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 54, 0, 52, 92, 116, 81, 191, 0, 0, 128, 191, 92, 116, 81, 191, 0, 129, 127, 63, 186, 48, 162, 55, 92, 116, 81, 191, 0, 0, 128, 191, 92, 116, 81, 191, 0, 0, 127, 193, 0, 48, 0, 56, 92, 116, 81, 191, 0, 0, 128, 191, 92, 116, 81, 191, 127, 0, 127, 63, 0, 48, 0, 56, 92, 116, 81, 191, 0, 0, 128, 191, 92, 116, 81, 63, 0, 129, 127, 63, 186, 48, 93, 52, 92, 116, 81, 191, 0, 0, 128, 191, 92, 116, 81, 63, 127, 127, 127, 63, 0, 48, 0, 52, 92, 116, 81, 191, 0, 0, 128, 191, 92, 116, 81, 63, 127, 0, 127, 63, 0, 48, 0, 52 ),
"array_index_data": PoolByteArray( 95, 0, 1, 0, 90, 0, 56, 0, 93, 0, 19, 0, 56, 0, 98, 0, 93, 0, 95, 0, 38, 0, 1, 0, 56, 0, 95, 0, 98, 0, 38, 0, 95, 0, 56, 0, 90, 0, 19, 0, 93, 0, 90, 0, 1, 0, 19, 0, 181, 0, 55, 0, 179, 0, 181, 0, 65, 0, 55, 0, 176, 0, 65, 0, 181, 0, 18, 0, 179, 0, 55, 0, 18, 0, 174, 0, 179, 0, 176, 0, 28, 0, 65, 0, 18, 0, 176, 0, 174, 0, 28, 0, 176, 0, 18, 0, 51, 0, 144, 0, 147, 0, 51, 0, 36, 0, 144, 0, 147, 0, 63, 0, 51, 0, 54, 0, 144, 0, 36, 0, 54, 0, 150, 0, 144, 0, 153, 0, 63, 0, 147, 0, 54, 0, 153, 0, 150, 0, 63, 0, 153, 0, 54, 0, 234, 0, 15, 0, 52, 0, 27, 0, 237, 0, 64, 0, 27, 0, 232, 0, 237, 0, 229, 0, 15, 0, 234, 0, 27, 0, 229, 0, 232, 0, 15, 0, 229, 0, 27, 0, 52, 0, 237, 0, 234, 0, 52, 0, 64, 0, 237, 0, 211, 0, 20, 0, 208, 0, 211, 0, 29, 0, 20, 0, 205, 0, 29, 0, 211, 0, 2, 0, 208, 0, 20, 0, 2, 0, 202, 0, 208, 0, 205, 0, 17, 0, 29, 0, 2, 0, 205, 0, 202, 0, 17, 0, 205, 0, 2, 0, 16, 0, 118, 0, 120, 0, 16, 0, 0, 0, 118, 0, 120, 0, 53, 0, 16, 0, 37, 0, 118, 0, 0, 0, 37, 0, 123, 0, 118, 0, 125, 0, 53, 0, 120, 0, 37, 0, 125, 0, 123, 0, 53, 0, 125, 0, 37, 0, 6, 0, 80, 0, 74, 0, 6, 0, 39, 0, 80, 0, 67, 0, 162, 0, 169, 0, 67, 0, 34, 0, 162, 0, 49, 0, 143, 0, 134, 0, 49, 0, 71, 0, 143, 0, 69, 0, 222, 0, 226, 0, 69, 0, 48, 0, 222, 0, 31, 0, 188, 0, 197, 0, 31, 0, 9, 0, 188, 0, 45, 0, 110, 0, 112, 0, 45, 0, 41, 0, 110, 0, 94, 0, 75, 0, 81, 0, 94, 0, 89, 0, 75, 0, 57, 0, 78, 0, 84, 0, 57, 0, 24, 0, 78, 0, 42, 0, 86, 0, 82, 0, 42, 0, 60, 0, 86, 0, 23, 0, 73, 0, 77, 0, 23, 0, 5, 0, 73, 0, 76, 0, 88, 0, 91, 0, 76, 0, 72, 0, 88, 0, 99, 0, 83, 0, 87, 0, 99, 0, 96, 0, 83, 0, 85, 0, 92, 0, 97, 0, 85, 0, 79, 0, 92, 0, 111, 0, 127, 0, 115, 0, 111, 0, 124, 0, 127, 0, 13, 0, 113, 0, 106, 0, 13, 0, 46, 0, 113, 0, 40, 0, 102, 0, 109, 0, 40, 0, 7, 0, 102, 0, 8, 0, 105, 0, 103, 0, 8, 0, 12, 0, 105, 0, 126, 0, 107, 0, 114, 0, 126, 0, 121, 0, 107, 0, 108, 0, 117, 0, 122, 0, 108, 0, 101, 0, 117, 0, 100, 0, 119, 0, 116, 0, 100, 0, 104, 0, 119, 0, 148, 0, 129, 0, 132, 0, 148, 0, 146, 0, 129, 0, 62, 0, 130, 0, 139, 0, 62, 0, 43, 0, 130, 0, 44, 0, 135, 0, 131, 0, 44, 0, 50, 0, 135, 0, 70, 0, 138, 0, 142, 0, 70, 0, 61, 0, 138, 0, 155, 0, 133, 0, 141, 0, 155, 0, 149, 0, 133, 0, 145, 0, 136, 0, 128, 0, 145, 0, 151, 0, 136, 0, 152, 0, 140, 0, 137, 0, 152, 0, 154, 0, 140, 0, 164, 0, 173, 0, 157, 0, 164, 0, 178, 0, 173, 0, 25, 0, 165, 0, 158, 0, 25, 0, 58, 0, 165, 0, 33, 0, 159, 0, 161, 0, 33, 0, 26, 0, 159, 0, 59, 0, 168, 0, 166, 0, 59, 0, 66, 0, 168, 0, 183, 0, 167, 0, 171, 0, 183, 0, 180, 0, 167, 0, 170, 0, 177, 0, 182, 0, 170, 0, 163, 0, 177, 0, 172, 0, 160, 0, 156, 0, 172, 0, 175, 0, 160, 0, 195, 0, 209, 0, 207, 0, 195, 0, 198, 0, 209, 0, 3, 0, 193, 0, 184, 0, 3, 0, 22, 0, 193, 0, 21, 0, 196, 0, 192, 0, 21, 0, 30, 0, 196, 0, 10, 0, 185, 0, 189, 0, 10, 0, 4, 0, 185, 0, 186, 0, 206, 0, 200, 0, 186, 0, 194, 0, 206, 0, 187, 0, 203, 0, 190, 0, 187, 0, 201, 0, 203, 0, 191, 0, 210, 0, 199, 0, 191, 0, 204, 0, 210, 0, 216, 0, 228, 0, 212, 0, 216, 0, 231, 0, 228, 0, 11, 0, 217, 0, 213, 0, 11, 0, 32, 0, 217, 0, 47, 0, 215, 0, 221, 0, 47, 0, 14, 0, 215, 0, 35, 0, 225, 0, 219, 0, 35, 0, 68, 0, 225, 0, 220, 0, 230, 0, 235, 0, 220, 0, 214, 0, 230, 0, 224, 0, 233, 0, 218, 0, 224, 0, 238, 0, 233, 0, 227, 0, 236, 0, 239, 0, 227, 0, 223, 0, 236, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 432,
"material": ExtResource( 7 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 240
}

[sub_resource type="SpatialMaterial" id=20]
flags_transparent = true
flags_unshaded = true
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="CubeMesh" id=9]
size = Vector3( 0.1, 0.1, 0.1 )

[sub_resource type="SpatialMaterial" id=8]
flags_transparent = true
flags_unshaded = true
albedo_color = Color( 0.282353, 0.282353, 0.282353, 0.223529 )

[sub_resource type="ArrayMesh" id=16]
surfaces/0 = {
"aabb": AABB( -0.0557735, -0.0557735, -0.0557735, 0.111547, 0.111557, 0.111557 ),
"array_data": PoolByteArray( 194, 114, 100, 189, 194, 114, 100, 61, 194, 114, 100, 61, 0, 0, 127, 64, 0, 0, 0, 0, 194, 114, 100, 61, 194, 114, 100, 61, 194, 114, 100, 189, 127, 127, 129, 64, 85, 57, 0, 0, 194, 114, 100, 61, 194, 114, 100, 61, 194, 114, 100, 61, 0, 0, 127, 64, 85, 53, 0, 0, 194, 114, 100, 189, 194, 114, 100, 61, 194, 114, 100, 189, 127, 127, 129, 64, 0, 60, 0, 0, 194, 114, 100, 189, 194, 114, 100, 189, 194, 114, 100, 61, 0, 0, 127, 64, 0, 0, 0, 56, 194, 114, 100, 61, 194, 114, 100, 189, 194, 114, 100, 189, 127, 127, 129, 64, 85, 57, 0, 56, 194, 114, 100, 61, 194, 114, 100, 189, 194, 114, 100, 61, 0, 0, 127, 64, 85, 53, 0, 56, 194, 114, 100, 189, 194, 114, 100, 189, 194, 114, 100, 189, 127, 127, 129, 64, 0, 60, 0, 56, 194, 114, 100, 61, 194, 114, 100, 61, 194, 114, 100, 61, 127, 0, 127, 127, 85, 53, 0, 0, 194, 114, 100, 189, 194, 114, 100, 61, 194, 114, 100, 189, 129, 0, 0, 63, 0, 0, 0, 56, 194, 114, 100, 61, 194, 114, 100, 61, 194, 114, 100, 189, 127, 0, 127, 127, 85, 57, 0, 0, 194, 114, 100, 189, 194, 114, 100, 61, 194, 114, 100, 61, 129, 0, 0, 63, 85, 53, 0, 56, 194, 114, 100, 61, 194, 114, 100, 189, 194, 114, 100, 61, 127, 0, 127, 127, 85, 53, 0, 56, 194, 114, 100, 189, 194, 114, 100, 189, 194, 114, 100, 189, 129, 0, 0, 63, 0, 0, 0, 60, 194, 114, 100, 61, 194, 114, 100, 189, 194, 114, 100, 189, 127, 0, 127, 127, 85, 57, 0, 56, 194, 114, 100, 189, 194, 114, 100, 189, 194, 114, 100, 61, 129, 0, 0, 63, 85, 53, 0, 60, 194, 114, 100, 61, 194, 114, 100, 61, 194, 114, 100, 61, 0, 127, 129, 64, 85, 53, 0, 56, 194, 114, 100, 189, 194, 114, 100, 189, 194, 114, 100, 61, 0, 129, 127, 64, 85, 57, 0, 56, 194, 114, 100, 189, 194, 114, 100, 61, 194, 114, 100, 61, 0, 127, 129, 64, 85, 57, 0, 56, 194, 114, 100, 61, 194, 114, 100, 189, 194, 114, 100, 61, 0, 129, 127, 64, 0, 60, 0, 56, 194, 114, 100, 61, 194, 114, 100, 61, 194, 114, 100, 189, 0, 127, 129, 64, 85, 53, 0, 60, 194, 114, 100, 189, 194, 114, 100, 189, 194, 114, 100, 189, 0, 129, 127, 64, 85, 57, 0, 60, 194, 114, 100, 189, 194, 114, 100, 61, 194, 114, 100, 189, 0, 127, 129, 64, 85, 57, 0, 60, 194, 114, 100, 61, 194, 114, 100, 189, 194, 114, 100, 189, 0, 129, 127, 64, 0, 60, 0, 60 ),
"array_index_data": PoolByteArray( 0, 0, 4, 0, 2, 0, 2, 0, 4, 0, 6, 0, 1, 0, 5, 0, 3, 0, 3, 0, 5, 0, 7, 0, 8, 0, 12, 0, 10, 0, 10, 0, 12, 0, 14, 0, 9, 0, 13, 0, 11, 0, 11, 0, 13, 0, 15, 0, 16, 0, 20, 0, 18, 0, 18, 0, 20, 0, 22, 0, 17, 0, 21, 0, 19, 0, 19, 0, 21, 0, 23, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 36,
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 24
}

[sub_resource type="SpatialMaterial" id=13]
flags_unshaded = true
albedo_color = Color( 0, 0, 0, 0.0980392 )

[sub_resource type="CubeMesh" id=17]
size = Vector3( 0.1, 0.1, 0.1 )

[sub_resource type="SpatialMaterial" id=10]
flags_unshaded = true

[sub_resource type="BoxShape" id=11]
extents = Vector3( 0.95, 0.01, 0.95 )

[sub_resource type="SpatialMaterial" id=25]
flags_transparent = true
flags_unshaded = true
albedo_color = Color( 0, 0, 1, 0.0901961 )

[sub_resource type="CylinderMesh" id=22]
material = SubResource( 25 )
top_radius = 0.01
bottom_radius = 0.01
height = 10.0

[sub_resource type="SpatialMaterial" id=24]
flags_transparent = true
flags_unshaded = true
albedo_color = Color( 1, 0, 0, 0.0901961 )

[sub_resource type="SpatialMaterial" id=29]
flags_unshaded = true

[sub_resource type="CylinderMesh" id=30]
material = SubResource( 29 )
top_radius = 0.01
bottom_radius = 0.05
height = 0.05

[sub_resource type="SpatialMaterial" id=26]
flags_transparent = true
flags_unshaded = true
albedo_color = Color( 0, 1, 0, 0.0901961 )

[sub_resource type="CylinderMesh" id=27]
material = SubResource( 26 )
top_radius = 0.01
bottom_radius = 0.01
height = 10.0
radial_segments = 8

[sub_resource type="SpatialMaterial" id=31]
flags_unshaded = true

[sub_resource type="CylinderMesh" id=28]
material = SubResource( 31 )
top_radius = 0.01
bottom_radius = 0.05
height = 0.05
radial_segments = 4
rings = 1

[node name="Editor" type="Spatial"]
script = ExtResource( 3 )

[node name="camera" type="Position3D" parent="."]
script = ExtResource( 1 )

[node name="camera" type="Camera" parent="camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5 )
current = true
near = 0.01

[node name="MeshInstance" type="MeshInstance" parent="camera/camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.139213 )
visible = false
mesh = SubResource( 4 )
material/0 = SubResource( 6 )

[node name="model" type="CSGCombiner" parent="."]
use_collision = true
script = ExtResource( 2 )

[node name="GUI" type="CanvasLayer" parent="."]
script = ExtResource( 4 )

[node name="ui" type="Control" parent="GUI"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 6 )

[node name="right_panel" type="Panel" parent="GUI/ui"]
anchor_left = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -202.0

[node name="export_button" type="Button" parent="GUI/ui/right_panel"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -92.0
margin_top = -72.0
margin_right = 92.0
margin_bottom = -20.0
text = "Экспорт"

[node name="projects_list" type="Panel" parent="GUI/ui/right_panel"]
anchor_left = 0.0792079
anchor_top = 0.358333
anchor_right = 0.933957
anchor_bottom = 0.766666
theme = ExtResource( 6 )
custom_styles/panel = SubResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Label" type="Label" parent="GUI/ui/right_panel/projects_list"]
anchor_top = -0.077551
anchor_right = 1.0
text = "Проекты"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": true
}

[node name="ScrollContainer" type="ScrollContainer" parent="GUI/ui/right_panel/projects_list"]
anchor_left = 0.0521258
anchor_top = 0.0326531
anchor_right = 0.95564
anchor_bottom = 0.967348
__meta__ = {
"_edit_use_anchors_": true
}

[node name="VBoxContainer" type="VBoxContainer" parent="GUI/ui/right_panel/projects_list/ScrollContainer"]

[node name="new_project_button" type="Button" parent="GUI/ui/right_panel"]
margin_left = 16.0
margin_top = 14.0
margin_right = 189.0
margin_bottom = 62.0
text = "Новый проект"

[node name="up_panel" type="Panel" parent="GUI/ui"]
anchor_right = 1.0
margin_left = 179.0
margin_right = -203.0
margin_bottom = 75.0
__meta__ = {
"_edit_use_anchors_": true
}

[node name="buttons" type="HBoxContainer" parent="GUI/ui/up_panel"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -159.5
margin_top = -24.0
margin_right = 159.5
margin_bottom = 24.0

[node name="selectViewMode" type="OptionButton" parent="GUI/ui/up_panel/buttons"]
margin_right = 88.599
margin_bottom = 48.0
text = "Standart"
items = [ "Standart", null, false, 0, null, "Wireframe", null, false, 1, null ]
selected = 0

[node name="is_outline" type="CheckButton" parent="GUI/ui/up_panel/buttons"]
margin_left = 92.0
margin_right = 220.354
margin_bottom = 48.0
text = "Обводка"

[node name="left_panel" type="Panel" parent="GUI/ui"]
anchor_bottom = 1.0
margin_right = 179.0

[node name="select_color_container" type="HBoxContainer" parent="GUI/ui/left_panel"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 14.0
margin_top = -58.0
margin_right = 150.0
margin_bottom = -18.0

[node name="color_label" type="Label" parent="GUI/ui/left_panel/select_color_container"]
margin_right = 91.0
margin_bottom = 39.6667
text = "Добавить
цвет"

[node name="voxel_color_picker" type="ColorPickerButton" parent="GUI/ui/left_panel/select_color_container"]
margin_left = 95.0
margin_right = 147.014
margin_bottom = 40.0
rect_min_size = Vector2( 52.014, 30 )
color = Color( 0.603922, 0.603922, 0.603922, 1 )

[node name="brush_mode_buttons" type="VBoxContainer" parent="GUI/ui/left_panel"]
anchor_left = 0.234637
anchor_top = 0.155
anchor_right = 0.787709
anchor_bottom = 0.301667
__meta__ = {
"_edit_use_anchors_": true
}

[node name="brush_mode_label" type="Label" parent="GUI/ui/left_panel/brush_mode_buttons"]
margin_top = -1.0
margin_right = 98.0
margin_bottom = 17.3333
text = "Режим"
align = 1
valign = 2

[node name="attach_mode_button" type="Button" parent="GUI/ui/left_panel/brush_mode_buttons"]
margin_top = 22.0
margin_right = 98.0
margin_bottom = 40.3333
disabled = true
text = "Установка"

[node name="erase_mode_button" type="Button" parent="GUI/ui/left_panel/brush_mode_buttons"]
margin_top = 44.0
margin_right = 98.0
margin_bottom = 62.3333
text = "Убирание"

[node name="paint_mode_button" type="Button" parent="GUI/ui/left_panel/brush_mode_buttons"]
margin_top = 66.0
margin_right = 98.0
margin_bottom = 84.3333
text = "Рисование"

[node name="reload_model_button" type="Button" parent="GUI/ui/left_panel"]
anchor_left = 0.0782123
anchor_top = 0.791667
anchor_right = 0.932961
anchor_bottom = 0.891667
margin_right = -1.52588e-05
text = "Перезагрузить"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="colors_list_panel" type="Panel" parent="GUI/ui/left_panel"]
anchor_left = 0.0782123
anchor_top = 0.356667
anchor_right = 0.932961
anchor_bottom = 0.765
theme = SubResource( 14 )
custom_styles/panel = SubResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Label" type="Label" parent="GUI/ui/left_panel/colors_list_panel"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -27.5
margin_top = -18.0
margin_right = 27.5
margin_bottom = 0.5
text = "Цвета"
align = 1
valign = 1

[node name="ScrollContainer" type="ScrollContainer" parent="GUI/ui/left_panel/colors_list_panel"]
anchor_left = 0.0457516
anchor_top = 0.0285715
anchor_right = 0.954248
anchor_bottom = 0.975511
scroll_horizontal_enabled = false
__meta__ = {
"_edit_use_anchors_": true
}

[node name="colors_grid" type="GridContainer" parent="GUI/ui/left_panel/colors_list_panel/ScrollContainer"]
columns = 5

[node name="open_save_project_panel_button" type="Button" parent="GUI/ui/left_panel"]
anchor_right = 1.0
margin_left = 14.0
margin_top = 14.0
margin_right = -12.0
margin_bottom = 62.0
text = "Сохранить"

[node name="workspace_area" type="ColorRect" parent="GUI/ui"]
anchor_left = 0.173828
anchor_top = 0.121667
anchor_right = 0.801758
anchor_bottom = 1.00167
color = Color( 0.270588, 0.270588, 0.270588, 0.054902 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="export_project_panel" type="Panel" parent="GUI/ui"]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -282.5
margin_top = -87.5
margin_right = 282.5
margin_bottom = 87.5

[node name="export_project_file_name" type="LineEdit" parent="GUI/ui/export_project_panel"]
margin_left = 43.0
margin_top = 38.0
margin_right = 527.0
margin_bottom = 90.0
placeholder_text = "Название файла... (.obj)"

[node name="export_project_label" type="Label" parent="GUI/ui/export_project_panel"]
anchor_right = 1.0
margin_top = 9.0
margin_bottom = 27.3333
text = "Экспортировать проект"
align = 1

[node name="close_export_project_panel_button_big" type="Button" parent="GUI/ui/export_project_panel"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -138.5
margin_top = -56.0
margin_right = 141.5
margin_bottom = -13.0
text = "Закрыть"

[node name="export_project_button" type="Button" parent="GUI/ui/export_project_panel"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -139.5
margin_top = -56.0
margin_right = 140.5
margin_bottom = -14.0
text = "Экспортировать"

[node name="create_folder_check_box" type="CheckBox" parent="GUI/ui/export_project_panel/export_project_button"]
anchor_left = 1.02679
anchor_top = 0.321428
anchor_right = 1.45368
anchor_bottom = 0.757936
custom_fonts/font = SubResource( 33 )
pressed = true
text = "Создать папку"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="close_export_project_panel_button" type="Button" parent="GUI/ui/export_project_panel"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -28.5
margin_top = 9.5
margin_right = -6.5
margin_bottom = 29.5
custom_styles/normal = SubResource( 18 )
text = "X"

[node name="output_message_label" type="Label" parent="GUI/ui/export_project_panel"]
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = 0.5
margin_top = 9.0
margin_right = 0.5
margin_bottom = 27.3333
custom_colors/font_color = Color( 1, 1, 1, 0.545098 )
custom_fonts/font = SubResource( 32 )
align = 1
valign = 1

[node name="save_project_panel" type="Panel" parent="GUI/ui"]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -282.5
margin_top = -87.5
margin_right = 282.5
margin_bottom = 87.5

[node name="save_project_file_name" type="LineEdit" parent="GUI/ui/save_project_panel"]
margin_left = 43.0
margin_top = 38.0
margin_right = 527.0
margin_bottom = 90.0
placeholder_text = "Название файла... (.ve)"

[node name="save_project_label" type="Label" parent="GUI/ui/save_project_panel"]
anchor_right = 1.0
margin_top = 9.0
margin_bottom = 27.3333
text = "Сохранить проект"
align = 1

[node name="save_project_button" type="Button" parent="GUI/ui/save_project_panel"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -139.5
margin_top = -56.0
margin_right = 140.5
margin_bottom = -14.0
text = "Сохранить"

[node name="close_save_project_panel_button" type="Button" parent="GUI/ui/save_project_panel"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -28.5
margin_top = 9.5
margin_right = -6.5
margin_bottom = 29.5
custom_styles/normal = SubResource( 18 )
text = "X"

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -0.945861, -0.0732857, 0.316191, 0.0653377, 0.911241, 0.406658, -0.317928, 0.405301, -0.857119, 0, 0.127052, -0.470254 )

[node name="remove_cursor" type="MeshInstance" parent="."]
transform = Transform( 0.06, 0, 0, 0, 0.06, 0, 0, 0, 0.06, 0, 0, 0 )
mesh = SubResource( 19 )
skeleton = NodePath("../cursor")
material/0 = SubResource( 20 )

[node name="cursor" type="MeshInstance" parent="."]
visible = false
mesh = SubResource( 9 )
material/0 = SubResource( 8 )

[node name="remove_cursor2" type="MeshInstance" parent="."]
visible = false
mesh = SubResource( 16 )
material/0 = SubResource( 13 )

[node name="MeshInstance" type="MeshInstance" parent="remove_cursor2"]
visible = false
mesh = SubResource( 17 )

[node name="wireframe" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.05, 0 )
mesh = ExtResource( 5 )
material/0 = SubResource( 10 )

[node name="StaticBody" type="StaticBody" parent="wireframe"]

[node name="CollisionShape" type="CollisionShape" parent="wireframe/StaticBody"]
shape = SubResource( 11 )

[node name="coordinates_preview" type="Spatial" parent="."]

[node name="X_preview" type="MeshInstance" parent="coordinates_preview"]
transform = Transform( -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0 )
mesh = SubResource( 22 )
skeleton = NodePath("../..")
material/0 = SubResource( 24 )

[node name="CSGMesh" type="MeshInstance" parent="coordinates_preview/X_preview"]
transform = Transform( 1, 0, 0, 0, -1, 8.74228e-08, 0, -8.74228e-08, -1, 0, -5.04106, -2.20352e-07 )
mesh = SubResource( 30 )

[node name="Y_preview" type="MeshInstance" parent="coordinates_preview"]
transform = Transform( 1, 0, 0, 0, -1, 8.74228e-08, 0, -8.74228e-08, -1, 0, 0, 0 )
mesh = SubResource( 27 )
skeleton = NodePath("../..")

[node name="CSGMesh" type="MeshInstance" parent="coordinates_preview/Y_preview"]
transform = Transform( 1, 0, 0, 0, -1, 8.74228e-08, 0, -8.74228e-08, -1, 0, -5.04106, -2.20352e-07 )
mesh = SubResource( 28 )

[node name="Z_preview" type="MeshInstance" parent="coordinates_preview"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 22 )
skeleton = NodePath("../..")

[node name="CSGMesh" type="MeshInstance" parent="coordinates_preview/Z_preview"]
transform = Transform( 1, 0, 0, 0, -1, 8.74228e-08, 0, -8.74228e-08, -1, 0, -5.04106, -2.20352e-07 )
mesh = SubResource( 28 )

[connection signal="pressed" from="GUI/ui/right_panel/export_button" to="GUI" method="_on_export_button_pressed"]
[connection signal="pressed" from="GUI/ui/right_panel/new_project_button" to="GUI" method="_on_new_project_button_pressed"]
[connection signal="item_selected" from="GUI/ui/up_panel/buttons/selectViewMode" to="GUI" method="_on_selectViewMode_item_selected"]
[connection signal="toggled" from="GUI/ui/up_panel/buttons/is_outline" to="GUI" method="_on_is_outline_toggled"]
[connection signal="popup_closed" from="GUI/ui/left_panel/select_color_container/voxel_color_picker" to="GUI" method="_on_voxel_color_picker_popup_closed"]
[connection signal="pressed" from="GUI/ui/left_panel/brush_mode_buttons/attach_mode_button" to="GUI" method="_on_attach_mode_button_pressed"]
[connection signal="pressed" from="GUI/ui/left_panel/brush_mode_buttons/erase_mode_button" to="GUI" method="_on_erase_mode_button_pressed"]
[connection signal="pressed" from="GUI/ui/left_panel/brush_mode_buttons/paint_mode_button" to="GUI" method="_on_paint_mode_button_pressed"]
[connection signal="pressed" from="GUI/ui/left_panel/reload_model_button" to="GUI" method="_on_reload_model_button_pressed"]
[connection signal="pressed" from="GUI/ui/left_panel/open_save_project_panel_button" to="GUI" method="_on_open_save_project_panel_button_pressed"]
[connection signal="mouse_entered" from="GUI/ui/workspace_area" to="GUI" method="_on_workspace_area_mouse_entered"]
[connection signal="mouse_exited" from="GUI/ui/workspace_area" to="GUI" method="_on_workspace_area_mouse_exited"]
[connection signal="pressed" from="GUI/ui/export_project_panel/close_export_project_panel_button_big" to="GUI" method="_on_close_export_project_panel_button_pressed"]
[connection signal="pressed" from="GUI/ui/export_project_panel/export_project_button" to="GUI" method="_on_export_project_button_pressed"]
[connection signal="pressed" from="GUI/ui/export_project_panel/close_export_project_panel_button" to="GUI" method="_on_close_export_project_panel_button_pressed"]
[connection signal="pressed" from="GUI/ui/save_project_panel/save_project_button" to="GUI" method="_on_save_project_button_pressed"]
[connection signal="pressed" from="GUI/ui/save_project_panel/close_save_project_panel_button" to="GUI" method="_on_close_save_project_panel_button_pressed"]
